from nltk.tokenize import word_tokenize
from nltk.tag.hmm import HiddenMarkovModelTagger, HiddenMarkovModelTrainer
from nltk.probability import (DictionaryConditionalProbDist,
                              RandomProbDist)
import numpy as np
import random
import time
import pickle
import matplotlib.pyplot as plt

def load_obj(name):
    with open(name + '.pkl', 'rb') as f:
        return pickle.load(f)

def visualize_transition_matrix_graph(A):
    G = nx.DiGraph()
    Asize = A.shape
    G.add_nodes_from(range(Asize[0]))
    
    edge_labels = {}
                    
    for i in range(Asize[0]):
        for j in range(Asize[1]):
            G.add_edge(i, j, weight=A[i, j])
            edge_labels[(i, j)] = '{:.4f}'.format(A[i, j])
            
    pos = nx.spectral_layout(G)  # positions for all nodes
            
    # nodes
    nx.draw_networkx_nodes(G, pos, node_size=700)
    
    # edges
    nx.draw_networkx_edges(G, pos, width=2)
    
    # labels
    nx.draw_networkx_labels(G, pos, font_size=20, font_family='sans-serif')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=12, font_family='sans-serif')
    
    plt.axis('off')
    plt.savefig("weighted_graph.png")  # save as png
    plt.show()  # display


def plot_observation_bar(O):
    Osize = O.shape
    
    f, ax = plt.subplots(Osize[0], sharex=True, sharey=True)
    
    for ind in range(len(ax)):
        # print ind
        ax[ind].scatter(range(Osize[1]), O[ind], marker='.')
    # plt.setp(markerline, 'linewidth', 1)
    
    ax[0].set_title('Sharing both axes')
    # Fine-tune figure; make subplots close to each other and hide x ticks for
    # all but bottom plot.
    f.subplots_adjust(hspace=0)
    plt.setp([a.get_xticklabels() for a in f.axes[:-1]], visible=False)
    plt.xlim(0, Osize[1])
    # plt.ylim(0, None)
    
    plt.savefig("observation_graph.png")  # save as png
    plt.show()  # display

def find_top_words_for_states(n, O, symbols):
    """
    Top n words for each state.
    Return dictionary with the state as the key
    and a list of tuple (word, probability) as the value
    """
    Osize = O.shape

    top_words = {}
    for state in range(Osize[0]):
        top_index = sorted(range(len(O[state])), key=lambda i: O[state, i], reverse=True)[:n]
        top_words[state] = [(symbols[ind], O[state, ind]) for ind in top_index]

    return top_words


def save_obj(obj, name):
    with open(name + '.pkl', 'wb') as f:
        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)


A_list = load_obj('transition_matrix')
O_list = load_obj('observation_matrix')
symbols = load_obj('symbols')

A = np.array(A_list,dtype=np.float64)
O = np.array(O_list,dtype=np.float64)
print(A)
top_10_words = find_top_words_for_states(10, O, symbols)
save_obj(top_10_words, 'top_10_words')
plot_observation_bar(O)

